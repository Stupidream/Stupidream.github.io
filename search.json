[{"title":"Java面试题集锦","url":"%2Fpassages%2Fjava-face%2F","content":"\n## Java基础\n### 什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？\n\nJava虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。  \nJava被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。\n\n### JDK和JRE的区别是什么？\n\nJava运行时环境(JRE)是将要执行Java程序的Java虚拟机。它同时也包含了执行applet需要的浏览器插件。  \nJava开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程序。\n\n<!-- more -->\n\n### ”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？\n\n“static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。  \nJava中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。private修饰不支持继承，private修饰的方法同样不能被覆盖。\n\n### 是否可以在static环境中访问非static变量？\n\nstatic变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。  \n因为静态的成员属于类，随着类的加载而加载到静态方法区内存，当类加载时，此时不一定有实例创建，没有实例，就不可以访问非静态的成员。类的加载先于实例的创建，因此静态环境中，不可以访问非静态！\n\n### Java支持的数据类型有哪些？什么是自动拆装箱？\n\nJava语言支持的8种基本数据类型是：\n-  byte\n- short\n- int\n- long\n- float\n- double\n- boolean\n- char\n\n自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。\n\n\n### Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？\n\nJava中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。  \n与此相对，方法覆盖是说子类重新定义了父类的方法。方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。\n\n### Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？\n\n当新对象被创建的时候，构造函数会被调用。每一个类都有构造函数。在程序员没有给类提供构造函数的情况下，Java编译器会为这个类创建一个默认的构造函数。  \nJava中构造函数重载和方法重载很相似。可以为一个类创建多个构造函数。每一个构造函数必须有它自己唯一的参数列表。  \nJava不支持像C\\+\\+中那样的复制构造函数，这个不同点是因为如果你不自己写构造函数的情况下，Java不会创建默认的复制构造函数。( java中不支持构造函数的复制。构造函数的复制属于C\\+\\+的内容。 )\n\n### Java支持多继承么？\n\nJava中类不支持多继承，只支持单继承（即一个类只有一个父类）。 但是java中的接口支持多继承，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）。\n\n### 接口和抽象类的区别是什么？\n\nJava提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于：\n1. 接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法；\n2. 接口中的成员方法默认是public的。抽象类的成员函数可以是private，protected或者是public；\n3. 接口中声明的变量默认都是final的。抽象类可以包含非final的变量；\n4. 类可以实现很多个接口，但是只能继承一个抽象类；\n5. 类可以不实现抽象类和接口声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的；\n6. 抽象类可以在不提供接口方法实现的情况下实现接口；\n7. 接口是绝对抽象的，不可以被实例化。抽象类也不可以被实例化，但是，如果它包含main方法的话是可以被调用的；\n\n### 什么是值传递和引用传递？\n\n值传递是对基本型变量而言的,传递的是该变量的一个副本，改变副本不影响原变量.  \n引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。 所以对引用对象进行操作会同时改变原对象.  \n一般认为,java内的传递都是值传递.\n\n## 多线程\n### 进程和线程的区别是什么？\n\n进程是执行着的应用程序，而线程是进程内部的一个执行序列。一个进程可以有多个线程。线程又叫做轻量级进程。\n\n### 创建线程有几种不同的方式？你喜欢哪一种？为什么？\n\n有三种方式可以用来创建线程：\n- 继承Thread类\n- 实现Runnable接口\n- 应用程序可以使用Executor框架来创建线程池\n\n实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而Java不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。  \n概括的解释下线程的几种可用状态。\n- 新建( new )：新创建了一个线程对象；\n- 可运行( runnable )：线程对象创建后，其他线程(比如 main 线程）调用了该对象的 start ()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取CPU的使用权；\n- 运行( running )：可运行状态( runnable )的线程获得了CPU时间片（ timeslice ） ，执行程序代码；\n- 阻塞( block )：阻塞状态是指线程因为某种原因放弃了CPU 使用权，也即让出了 CPU timeslice ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态。阻塞的情况分三种：\n\t- 等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中。\n\t- 同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。\n\t- 其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I / O 请求时， JVM 会把该线程置为阻塞状态。当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I / O 处理完毕时，线程重新转入可运行( runnable )状态。\n\t- 死亡( dead )：线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。\n\n### 同步方法和同步代码块的区别是什么？\n\n区别：  \n同步方法默认用this或者当前类class对象作为锁；  \n同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法；\n\n### 在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？\n\n监视器和锁在Java虚拟机中是一块使用的。监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。每一个监视器都和一个对象引用相关联。线程在获取锁之前不允许执行同步代码。  \njava 还提供了显式监视器( Lock )和隐式监视器( synchronized )两种锁方案。\n\n### 什么是死锁(deadlock)？\n\n两个线程或两个以上线程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁。结果就是这些线程都陷入了无限的等待中。  \n\n### 如何确保N个线程可以访问N个资源同时又不导致死锁？\n多线程产生死锁的四个必要条件：\n1. 互斥条件：一个资源每次只能被一个进程使用。\n2. 保持和请求条件：一个进程因请求资源而阻塞时，对已获得资源保持不放。\n3. 不可剥夺性：进程已获得资源，在未使用完成前，不能被剥夺。\n4. 循环等待条件（闭环）：若干进程之间形成一种头尾相接的循环等待资源关系。\n\n只要破坏其中任意一个条件，就可以避免死锁  \n一种非常简单的避免死锁的方式就是：指定获取锁的顺序，并强制线程按照指定的顺序获取锁。因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。\n\n## 集合\n### Java集合类框架的基本接口有哪些？\n\n集合类接口指定了一组叫做元素的对象。集合类接口的每一种具体的实现类都可以选择以它自己的方式对元素进行保存和排序。有的集合类允许重复的键，有些不允许。  \nJava集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。Java集合类里面最基本的接口有：  \n**Collection**：代表一组对象，每一个对象都是它的子元素。  \n**Set**：不包含重复元素的Collection。  \n**List**：有顺序的collection，并且可以包含重复元素。  \n**Map**：可以把键(key)映射到值(value)的对象，键不能重复。  \n\n### 为什么集合类没有实现Cloneable和Serializable接口？\n\n克隆(cloning)或者是序列化(serialization)的语义和含义是跟具体的实现相关的。因此，应该由集合类的具体实现来决定如何被克隆或者是序列化。\n\n### 什么是迭代器( Iterator ) ？\n\nIterator接口提供了很多对集合元素进行迭代的方法。每一个集合类都包含了可以返回迭代器实例的迭代方法。  \n迭代器可以在迭代的过程中删除底层集合的元素,但是不可以直接调用集合的remove(Object Obj)删除，可以通过迭代器的remove()方法删除。\n\n### Iterator 和 ListIterator 的区别是什么？\n\n下面列出了他们的区别：  \nIterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。  \nIterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。  \nListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。\n\n### 快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？\n\nIterator的安全失败是基于对底层集合做拷贝，因此，它不受源集合上修改的影响。  \njava.util包下面的所有的集合类都是快速失败的；  \njava.util.concurrent包下面的所有的类都是安全失败的。快速失败的迭代器会抛出ConcurrentModificationException异常，而安全失败的迭代器永远不会抛出这样的异常。\n\n### Java中的HashMap的工作原理是什么？\n\nJava中的HashMap是以键值对(key-value)的形式存储元素的。  \nHashMap需要一个hash函数，它使用hashCode()和equals()方法来向集合添加和检索元素。当调用put()方法的时候，HashMap会计算key的hash值，然后把键值对存储在集合中合适的索引上。如果key已经存在了，则用新的value覆盖原值。  \nHashMap的一些重要的特性是它的容量(capacity)，负载因子(load factor)和扩容极限(threshold resizing)。  \nHashMap的两个重要属性是容量capacity和加载因子loadfactor，默认值分布为16和0.75，当容器中的元素个数大于 capacity * loadfactor时，容器会进行扩容（resize） 为2n，在初始化Hashmap时可以对着两个值进行修改，负载因子0.75被证明为是性能比较好的取值，通常不会修改，那么只有初始容量capacity会导致频繁的扩容行为，这是非常耗费资源的操作，所以，如果事先能估算出容器所要存储的元素数量，最好在初始化时修改默认容量capacity，以防止频繁的resize操作影响性能。\n\n### hashCode()和equals()方法的重要性体现在什么地方？\n\nJava中的HashMap使用hashCode()和equals()方法来确定键值对的索引，当根据键获取值的时候也会用到这两个方法。如果没有正确的实现这两个方法，两个不同的键可能会有相同的hash值，因此，可能会被集合认为是相等的。而且，这两个方法也用来发现重复元素。所以这两个方法的实现对HashMap的精确性和正确性是至关重要的。\n\n### HashMap和Hashtable有什么区别？\n\nHashMap和Hashtable都实现了Map接口，因此很多特性非常相似。但是，他们有以下不同点：\n1. HashMap允许键和值是null，而Hashtable不允许键或者值是null。\n2. Hashtable是同步的，而HashMap不是。因此，HashMap更适合于单线程环境，而Hashtable适合于多线程环境。\n3. HashMap提供了可供应用迭代的键的集合，因此，HashMap是快速失败的。另一方面，Hashtable提供了对键的枚举(Enumeration)。\n\n一般认为Hashtable是一个遗留的类。内部实现很多没优化和冗余，一般现在不建议用HashTable，现在也有同步的ConcurrentHashMap替代，没有必要因为是多线程而用HashTable。\n\n### 数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？\n\n下面列出了Array和ArrayList的不同点：\n1. Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。\n2. Array大小是固定的，ArrayList的大小是动态变化的。\n3. ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。\n4. 对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。\n\n### ArrayList和LinkedList有什么区别？\n\nArrayList和LinkedList都实现了List接口，他们有以下的不同点：\n1. ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。\n2. 相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。\n3. LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。\n\n### Comparable和Comparator接口是干什么的？列出它们的区别。\n\nJava提供了只包含一个compareTo()方法的Comparable接口。  \n这个方法可以个给两个对象排序。具体来说，它返回负数，0，正数来表明输入对象小于，等于，大于已经存在的对象。  \nJava提供了包含compare()和equals()两个方法的Comparator接口。  \ncompare()方法用来给两个输入参数排序，返回负数，0，正数表明第一个参数是小于，等于，大于第二个参数。  \nequals()方法需要一个对象作为参数，它用来决定输入参数是否和comparator相等。只有当输入参数也是一个comparator并且输入参数和当前comparator的排序结果是相同的时候，这个方法才返回true。\n\n### 什么是Java优先级队列(Priority Queue)？\n\nPriorityQueue是一个基于优先级堆的无界队列，它的元素是按照自然顺序(natural order)排序的。  \n在创建的时候，我们可以给它提供一个负责给元素排序的比较器。PriorityQueue不允许null值，因为他们没有自然顺序，或者说他们没有任何的相关联的比较器。最后，PriorityQueue不是线程安全的，入队和出队的时间复杂度是O(log(n))。\n\n### 你了解大O符号(big-O notation)么？你能给出不同数据结构的例子么？\n\n**大O符号表示一个程序运行时所需要的渐进时间复杂度上界。**  \n其函数表示是：  \n对于函数$f(n),g(n)$,如果存在一个常数$c$，使得$f(n) <= c * g(n)$，则$f(n) = O(g(n))$；\n大O描述当数据结构中的元素增加时，算法的规模和性能在最坏情景下有多好。\n大O还可以描述其它行为，比如内存消耗。因为集合类实际上是数据结构，因此我们一般使用大O符号基于时间，内存，性能选择最好的实现。\n大O符号可以对大量数据性能给予一个很好的说明。\n\n### 如何权衡是使用无序的数组还是有序的数组？\n\n- 查找：有序数组最大的好处在于查找的时间复杂度是O(log n)，而无序数组是O(n)。\n- 插入：有序数组的缺点是插入操作的时间复杂度是O(n)，因为值大的元素需要往后移动来给新元素腾位置。相反，无序数组的插入时间复杂度是常量O(1)。\n\n\n### Java集合类框架的最佳实践有哪些？\n\n* 根据应用的需要正确选择要使用的集合的类型对性能非常重要，比如：假如元素的大小是固定的，而且能事先知道，我们就应该用Array而不是ArrayList。\n* 有些集合类允许指定初始容量。因此，如果我们能估计出存储的元素的数目，我们可以设置初始容量来避免重新计算hash值或者是扩容。\n* 为了类型安全，可读性和健壮性的原因总是要使用泛型。同时，使用泛型还可以避免运行时的ClassCastException。\n* 使用JDK提供的不变类(immutable class)作为Map的键可以避免为我们自己的类实现hashCode()和equals()方法。\n* 编程的时候接口优于实现。\n* 底层的集合实际上是空的情况下，返回长度是0的集合或者是数组，不要返回null。\n\n### Enumeration接口和Iterator 接口的区别有哪些？\n\nEnumeration速度是Iterator的2倍，同时占用更少的内存。但是，Iterator远远比Enumeration安全，因为其他线程不能够修改正在被iterator遍历的集合里面的对象。同时，Iterator允许调用者删除底层集合里面的元素，这对Enumeration来说是不可能的。\n\n### HashSet和TreeSet有什么区别？\n\nHashSet是由一个hash表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复杂度是$O(1)$。  \n另一方面，TreeSet是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()，remove()，contains()方法的时间复杂度是$O(logn)$。\n\n## JVM虚拟机\n### Java中垃圾回收有什么目的？什么时候进行垃圾回收？\n\n垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源。  \n触发主GC（Garbage Collector，垃圾回收）的条件：\n1. 当应用程序空闲时，即没有应用线程在运行时，GC会被调用。\n2. Java堆内存不足时，GC会被调用。\n\n### System.gc()和Runtime.gc()会做什么事情？\n\n这两个方法用来提示JVM要进行垃圾回收。但是，立即开始还是延迟进行垃圾回收是取决于JVM的。\n\n### finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？\n\n垃圾回收器(garbage colector)决定回收某对象时，就会运行该对象的finalize()方法 但是在Java中很不幸，如果内存总是充足的，那么垃圾回收可能永远不会进行，也就是说filalize()可能永远不被执行，显然指望它做收尾工作是靠不住的。  \n那么finalize()究竟是做什么的呢？它最主要的用途是回收特殊渠道申请的内存。Java程序有垃圾回收器，所以一般情况下内存问题不用程序员操心。但有一种JNI(Java Native Interface)调用non-Java程序（C或C\\+\\+），finalize()的工作就是回收这部分的内存。  \n析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做“清理善后” 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。如果用户没有编写析构函数，编译系统会自动生成一个缺省的析构函数（即使自定义了析构函数，编译器也总是会为我们合成一个析构函数，并且如果自定义了析构函数，编译器在执行时会先调用自定义的析构函数再调用合成的析构函数），它也不进行任何操作。\n\n### 如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？\n\n不会，在下一个垃圾回收周期中，这个对象将是可被回收的。  \n\n### Java堆的结构是什么样子的？什么是堆中的永久代(Perm Gen space)?\nJVM的堆是运行时数据区，所有类的实例和数组都是在堆上分配内存。它在JVM启动的时候被创建。对象所占的堆内存是由自动内存管理系统也就是垃圾收集器回收。  \n堆内存是由存活和死亡的对象组成的。存活的对象是应用可以访问的，不会被垃圾回收。死亡的对象是应用不可访问尚且还没有被垃圾收集器回收掉的对象。一直到垃圾收集器把这些对象回收掉之前，他们会一直占据堆内存空间。\n持久代(Perm Gen)：持久代主要存放类定义、字节码和常量等很少会变更的信息。  \n\nPS：  \n虚拟机中的共划分为三个代：  \n- 年轻代（Young Generation）\n- 年老代（Old Generation）\n- 持久代（Permanent Generation）。\n\n其中持久代主要存放的是Java类的类信息，与垃圾收集要收集的Java对象关系不大。年轻代和年老代的划分是对垃 圾收集影响比较大的。  \n年轻代:所有新生成的对象首先都是放在年轻代的。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。年轻代分三个区。一个Eden区，两个 Survivor区(一般而言)。大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到Survivor区（两个中的一个），当这个 Survivor区满时，此区的存活对象将被复制到另外一个Survivor区，当这个Survivor去也满了的时候，从第一个Survivor区复制过来的并且此时还存活的对象，将被复制“年老区(Tenured)”。需要注意，Survivor的两个区是对称的，没先后关系，所以同一个区中可能同时存在从Eden复制过来对象，和从前一个Survivor复制过来的对象，而复制到年老区的只有从第一个Survivor去过来的对象。而且，Survivor区总有一个是空的。同时，根据程序需要，Survivor区是可以配置为多个的（多于两个），这样可以增加对象在年轻代中的存在时间，减少被放到年老代的可能。  \n年老代:在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。  \n持久代:用于存放静态文件，主要存放类定义、字节码和常量等很少会变更的信息等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate 等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。持久代大小通过-XX:MaxPermSize=<N>进行设置。\n\n### 串行(serial)收集器和吞吐量(throughput)收集器的区别是什么？\n\n吞吐量收集器使用并行版本的新生代垃圾收集器，它用于中等规模和大规模数据的应用程序。而串行收集器对大多数的小应用(在现代处理器上需要大概100M左右的内存)就足够了。\n\n### 在Java中，对象什么时候可以被垃圾回收？\n\n当对象对当前使用这个对象的应用程序变得不可触及的时候，这个对象就可以被回收了。\n\n### JVM的永久代中会发生垃圾回收么？\n\n垃圾回收不会发生在永久代，如果永久代满了或者是超过了临界值，会触发完全垃圾回收(Full GC)。如果你仔细查看垃圾收集器的输出信息，就会发现永久代也是被回收的。这就是为什么正确的永久代大小对避免Full GC是非常重要的原因。  \n++(注：Java8中已经移除了永久代，新加了一个叫做元数据区的native内存区)++\n\n## 异常\n### Java中的两种异常类型是什么？他们有什么区别？\n\nThrowable包含了 **错误(Error)** 和 **异常(Excetion）** 两类；  \nException又包含了运行时异常(RuntimeException（又叫非检查异常)和非运行时异常(又叫检查异常)\n1. Error是程序无法处理了, 如果OutOfMemoryError、OutOfMemoryError等等, 这些异常发生时, java虚拟机一般会终止线程 .  \n2.  运行时异常都是RuntimeException类及其子类,如 NullPointerException、IndexOutOfBoundsException等, 这些异常是不检查的异常, 不受检查的异常不需要在方法或者是构造函数上声明，就算方法或者是构造函数的执行可能会抛出这样的异常，并且不受检查的异常可以传播到方法或者是构造函数的外面。\n3.  检查异常是运行时异常以外的异常, 也是Exception及其子类, 这些异常从程序的角度来说是必须要用throws语句在方法或者是构造函数上声明，否则不能通过编译. 如IOException、SQLException等\n\n### Java中Exception和Error有什么区别？\n\nException和Error都是Throwable的子类。Exception用于用户程序可以捕获的异常情况。Error定义了不期望被用户程序捕获的异常。\n\n### throw和throws有什么区别？\n\nthrow关键字用来在程序中明确的抛出异常  \n语法：  \nthrow(异常对象)\n```java\nthrow e;\n```\nthrows语句用来表明方法不能处理的异常。每一个方法都必须要指定哪些异常不能处理，所以方法的调用者才能够确保处理可能发生的异常，多个异常是用逗号分隔的。\n语法：\n修饰符 返回值类型 方法名 参数类型 throws 异常类  \n```java\npublic void test () throws Exception1,Exception2(){}\n```\n\n### 异常处理完成以后，Exception对象会发生什么变化？\n\nException对象会在下一个垃圾回收过程中被回收掉。\n\n### finally代码块和finalize()方法有什么区别？\n\n无论是否抛出异常，finally代码块都会执行，它主要是用来释放应用占用的资源。\nfinalize()方法是Object类的一个protected方法，它是在对象被垃圾回收之前由Java虚拟机来调用的。\n\n## Applet\n### 什么是Applet？\n\njava applet是能够被包含在HTML页面中并且能被启用了java的客户端浏览器执行的程序。  \nApplet主要用来创建动态交互的web应用程序。  \n解释一下Applet的生命周期\napplet可以经历下面的状态：  \nInit：每次被载入的时候都会被初始化。  \nStart：开始执行applet。  \nStop：结束执行applet。  \nDestroy：卸载applet之前，做最后的清理工作。  \n\n### 当applet被载入的时候会发生什么？\n\n首先，创建applet控制类的实例，然后初始化applet，最后开始运行。\n\n### Applet和普通的Java应用程序有什么区别？\n\napplet是运行在启用了java的浏览器中，Java应用程序是可以在浏览器之外运行的独立的Java程序。但是，它们都需要有Java虚拟机。  \n进一步来说，Java应用程序需要一个有特定方法签名的main函数来开始执行。  \nJava applet不需要这样的函数来开始执行。  \n最后，Java applet一般会使用很严格的安全策略，Java应用一般使用比较宽松的安全策略。\n\n### Java applet有哪些限制条件？\n\n主要是由于安全的原因，给applet施加了以下的限制：\n1. applet不能够载入类库或者定义本地方法。\n2. applet不能在宿主机上读写文件。\n3. applet不能读取特定的系统属性。\n4. applet不能发起网络连接，除非是跟宿主机。\n5. applet不能够开启宿主机上其他任何的程序。\n\n### 什么是不受信任的applet？\n\n不受信任的applet是不能访问或是执行本地系统文件的Java applet，默认情况下，所有下载的applet都是不受信任的。\n\n### 从网络上加载的applet和从本地文件系统加载的applet有什么区别？\n当applet是从网络上加载的时候，applet是由applet类加载器载入的，它受applet安全管理器的限制。  \n当applet是从客户端的本地磁盘载入的时候，applet是由文件系统加载器载入的。  \n从文件系统载入的applet允许在客户端读文件，写文件，加载类库，并且也允许执行其他程序，但是，却通不过字节码校验。\n\n### applet类加载器是什么？它会做哪些工作？\n\n当applet是从网络上加载的时候，它是由applet类加载器载入的。类加载器有自己的java名称空间等级结构。类加载器会保证来自文件系统的类有唯一的名称空间，来自网络资源的类有唯一的名称空间。  \n当浏览器通过网络载入applet的时候，applet的类被放置于和applet的源相关联的私有的名称空间中。然后，那些被类加载器载入进来的类都是通过了验证器验证的。验证器会检查类文件格式是否遵守Java语言规范，确保不会出现堆栈溢出(stack overflow)或者下溢(underflow)，传递给字节码指令的参数是正确的。\n\n### applet安全管理器是什么？它会做哪些工作？\n\napplet安全管理器是给applet施加限制条件的一种机制。浏览器可以只有一个安全管理器。安全管理器在启动的时候被创建，之后不能被替换覆盖或者是扩展。  \n安全管理器的作用在于，用户在执行某个操作时，调用安全管理器来进行check，有此权限则通过，没有则抛异常。\n\n### 弹出式选择菜单(Choice)和列表(List)有什么区别？\n\nChoice是以一种紧凑的形式展示的，需要下拉才能看到所有的选项。Choice中一次只能选中一个选项。List同时可以有多个元素可见，支持选中一个或者多个元素。\n\n### 什么是布局管理器？\n\n布局管理器用来在容器中组织组件。\n\n### 滚动条(Scrollbar)和滚动面板(JScrollPane)有什么区别？\n\nScrollbar是一个组件，不是容器。而ScrollPane是容器。ScrollPane自己处理滚动事件。\n\n### 哪些Swing 的方法是线程安全的？\n\n只有3个线程安全的方法： repaint(), revalidate(), and invalidate()。  \n说出三种支持重绘(painting)的组件。  \nCanvas, Frame, Panel,和Applet支持重绘。  \n\n### 什么是裁剪(clipping)？\n\n限制在一个给定的区域或者形状的绘图操作就做裁剪。\n\n### MenuItem和CheckboxMenuItem的区别是什么？\n\nCheckboxMenuItem类继承自MenuItem类，支持菜单选项可以选中或者不选中。\n\n### 边缘布局( BorderLayout ) 里面的元素是如何布局的？\n\nBorderLayout里面的元素是按照容器的东西南北中进行布局的。  \n\n### 网格包布局(GridBagLayout)里面的元素是如何布局的？\n\nGridBagLayout里面的元素是按照网格进行布局的。不同大小的元素可能会占据网格的多于1行或一列。因此，行数和列数可以有不同的大小。\n\n### Window和Frame有什么区别？\n\nFrame类继承了Window类，它定义了一个可以有菜单栏的主应用窗口。\n\n### 裁剪(clipping)和重绘(repainting)有什么联系？\n\n当窗口被AWT重绘线程进行重绘的时候，它会把裁剪区域设置成需要重绘的窗口的区域。\n\n### 事件监听器接口(event-listener interface)和事件适配器(event-adapter)有什么关系？\n\n事件监听器接口定义了对特定的事件，事件处理器必须要实现的方法。事件适配器给事件监听器接口提供了默认的实现。\n\n### GUI组件如何来处理它自己的事件？\n\nGUI组件可以处理它自己的事件，只要它实现相对应的事件监听器接口，并且把自己作为事件监听器。\n\n### Java的布局管理器比传统的窗口系统有哪些优势？\n\nJava使用布局管理器以一种一致的方式在所有的窗口平台上摆放组件。因为布局管理器不会和组件的绝对大小和位置相绑定，所以他们能够适应跨窗口系统的特定平台的不同。\n\n### Java的Swing组件使用了哪种设计模式？\n\nJava中的Swing组件使用了MVC(视图-模型-控制器)设计模式。\n\n## 数据库\n### 什么是JDBC？\n\nJDBC是允许用户在不同数据库之间做选择的一个抽象层。JDBC允许开发者用JAVA写数据库应用程序，而不需要关心底层特定数据库的细节。  \n解释下驱动(Driver)在JDBC中的角色。  \nJDBC驱动提供了特定厂商对JDBC API接口类的实现，驱动必须要提供java.sql包下面这些类的实现：Connection, Statement, PreparedStatement,CallableStatement, ResultSet和Driver。\n\n### Class.forName()方法有什么作用？\n\n初始化参数指定的类，并且返回此类对应的Class 对象\n\n### PreparedStatement比Statement有什么优势？\n\nPreparedStatements是预编译的，因此，性能会更好。同时，不同的查询参数值，PreparedStatement可以重用。\n\n### 什么时候使用CallableStatement？用来准备CallableStatement的方法是什么？\n\nCallableStatement用来执行存储过程。存储过程是由数据库存储和提供的。存储过程可以接受输入参数，也可以有返回结果。非常鼓励使用存储过程，因为它提供了安全性和模块化。准备一个CallableStatement的方法是：\nCallableStament.prepareCall();\n\n### 数据库连接池是什么意思？\n\n像打开关闭数据库连接这种和数据库的交互可能是很费时的，尤其是当客户端数量增加的时候，会消耗大量的资源，成本是非常高的。可以在应用服务器启动的时候建立很多个数据库连接并维护在一个池中。连接请求由池中的连接提供。在连接使用完毕以后，把连接归还到池中，以用于满足将来更多的请求。\n\n## RMI\n### 什么是RMI？\n\nJava远程方法调用(Java RMI)是Java API对远程过程调用(RPC)提供的面向对象的等价形式，支持直接传输序列化的Java对象和分布式垃圾回收。远程方法调用可以看做是激活远程正在运行的对象上的方法的步骤。RMI对调用者是位置透明的，因为调用者感觉方法是执行在本地运行的对象上的。\n\n### RMI体系结构的基本原则是什么？\n\nRMI体系结构是基于一个非常重要的行为定义和行为实现相分离的原则。RMI允许定义行为的代码和实现行为的代码相分离，并且运行在不同的JVM上。\n\n### RMI体系结构分哪几层？\n\nRMI体系结构分以下几层：\n1.  存根和骨架层(Stub and Skeleton layer)：这一层对程序员是透明的，它主要负责拦截客户端发出的方法调用请求，然后把请求重定向给远程的RMI服务。\n2.  远程引用层(Remote Reference Layer)：RMI体系结构的第二层用来解析客户端对服务端远程对象的引用。这一层解析并管理客户端对服务端远程对象的引用。连接是点到点的。\n3. 传输层(Transport layer)：这一层负责连接参与服务的两个JVM。这一层是建立在网络上机器间的TCP/IP连接之上的。它提供了基本的连接服务，还有一些防火墙穿透策略。\n\n### RMI中的远程接口(Remote Interface)扮演了什么样的角色？\n\n远程接口用来标识哪些方法是可以被非本地虚拟机调用的接口。远程对象必须要直接或者是间接实现远程接口。实现了远程接口的类应该声明被实现的远程接口，给每一个远程对象定义构造函数，给所有远程接口的方法提供实现。\n\n### java.rmi.Naming类扮演了什么样的角色？\n\njava.rmi.Naming类用来存储和获取在远程对象注册表里面的远程对象的引用。Naming类的每一个方法接收一个URL格式的String对象作为它的参数。\n\n### RMI的绑定( Binding ) 是什么意思？\n\n绑定是为了查找远程对象而给远程对象关联或者是注册以后会用到的名称的过程。远程对象可以使用Naming类的bind()或者rebind()方法跟名称相关联。\n\n### Naming类的bind()和rebind()方法有什么区别？\n\nbind()方法负责把指定名称绑定给远程对象，rebind()方法负责把指定名称重新绑定到一个新的远程对象。如果那个名称已经绑定过了，先前的绑定会被替换掉。\n\n### 让RMI程序能正确运行有哪些步骤？\n\n为了让RMI程序能正确运行必须要包含以下几个步骤：\n1. 编译所有的源文件；\n2. 使用rmic生成stub；\n3. 启动rmiregistry；\n4. 启动RMI服务器；\n5. 运行客户端程序；\n\n### RMI的stub扮演了什么样的角色？\n\n远程对象的stub扮演了远程对象的代表或者代理的角色。调用者在本地stub上调用方法，它负责在远程对象上执行方法。当stub的方法被调用的时候，会经历以下几个步骤：\n\n1. 初始化到包含了远程对象的JVM的连接；\n2. 序列化参数到远程的JVM；\n3. 等待方法调用和执行的结果；\n4. 反序列化返回的值或者是方法没有执行成功情况下的异常；\n5. 把值返回给调用者；\n\n### 什么是分布式垃圾回收(DGC)？它是如何工作的？\n\nDGC叫做分布式垃圾回收。RMI使用DGC来做自动垃圾回收。因为RMI包含了跨虚拟机的远程对象的引用，垃圾回收是很困难的。DGC使用引用计数算法来给远程对象提供自动内存管理。\n\n### RMI中使用RMI安全管理器(RMISecurityManager)的目的是什么？\n\nRMISecurityManager使用下载好的代码提供可被RMI应用程序使用的安全管理器。如果没有设置安全管理器，RMI的类加载器就不会从远程下载任何的类。\n\n### 解释下Marshalling和demarshalling。\n\n当应用程序希望把内存对象跨网络传递到另一台主机或者是持久化到存储的时候，就必须要把对象在内存里面的表示转化成合适的格式。这个过程就叫做Marshalling，反之就是demarshalling。\n\n### 解释下Serialization和Deserialization。\n\nJava提供了一种叫做对象序列化的机制，他把对象表示成一连串的字节，里面包含了对象的数据，对象的类型信息，对象内部的数据的类型信息等等。因此，序列化可以看成是为了把对象存储在磁盘上或者是从磁盘上读出来并重建对象而把对象扁平化的一种方式。反序列化是把对象从扁平状态转化成活动对象的相反的步骤。\n\n## JSP\n### 什么是Servlet？\n\nServlet是用来处理客户端请求并产生动态网页内容的Java类。Servlet主要是用来处理或者是存储HTML表单提交的数据，产生动态内容，在无状态的HTTP协议下管理状态信息。\n\n### 说一下Servlet的体系结构。\n\n所有的Servlet都必须要实现的核心的接口是javax.servlet.Servlet。每一个Servlet都必须要直接或者是间接实现这个接口，或者是继承javax.servlet.GenericServlet或者javax.servlet.http.HTTPServlet。最后，Servlet使用多线程可以并行的为多个请求服务。\n\n### Applet和Servlet有什么区别？\n\nApplet是运行在客户端主机的浏览器上的客户端Java程序。而Servlet是运行在web服务器上的服务端的组件。applet可以使用用户界面类，而Servlet没有用户界面，相反，Servlet是等待客户端的HTTP请求，然后为请求产生响应。\n\n### GenericServlet和HttpServlet有什么区别？\n\nGenericServlet是一个通用的协议无关的Servlet，它实现了Servlet和ServletConfig接口。继承自GenericServlet的Servlet应该要覆盖service()方法。最后，为了开发一个能用在网页上服务于使用HTTP协议请求的Servlet，你的Servlet必须要继承自HttpServlet。\n\n### 解释下Servlet的生命周期。\n\n对每一个客户端的请求，Servlet引擎载入Servlet，调用它的init()方法，完成Servlet的初始化。然后，Servlet对象通过为每一个请求单独调用service()方法来处理所有随后来自客户端的请求，最后，调用Servlet的destroy()方法把Servlet删除掉。\n\n### doGet()方法和doPost()方法有什么区别？\n\ndoGet：GET方法会把名值对追加在请求的URL后面。因为URL对字符数目有限制，进而限制了用在客户端请求的参数值的数目。并且请求中的参数值是可见的，因此，敏感信息不能用这种方式传递。  \ndoPOST：POST方法通过把请求参数值放在请求体中来克服GET方法的限制，因此，可以发送的参数的数目是没有限制的。最后，通过POST请求传递的敏感信息对外部客户端是不可见的。\n\n### 什么是Web应用程序？\n\nWeb应用程序是对Web或者是应用服务器的动态扩展。  \n有两种类型的Web应用：面向表现的和面向服务的。  \n面向表现：面向表现的Web应用程序会产生包含了很多种标记语言和动态内容的交互的web页面作为对请求的响应。  \n面向服务：面向服务的Web应用实现了Web服务的端点(endpoint)。一般来说，一个Web应用可以看成是一组安装在服务器URL名称空间的特定子集下面的Servlet的集合。\n\n### 什么是服务端包含(Server Side Include)？\n\n服务端包含(SSI)是一种简单的解释型服务端脚本语言，大多数时候仅用在Web上，用servlet标签嵌入进来。SSI最常用的场景把一个或多个文件包含到Web服务器的一个Web页面中。当浏览器访问Web页面的时候，Web服务器会用对应的servlet产生的文本来替换Web页面中的servlet标签。  \nServlet链是把一个Servlet的输出发送给另一个Servlet的方法。第二个Servlet的输出可以发送给第三个Servlet，依次类推。链条上最后一个Servlet负责把响应发送给客户端。\n\n### 什么是Servlet链(Servlet Chaining)？\n\nServlet链是把一个Servlet的输出发送给另一个Servlet的方法。第二个Servlet的输出可以发送给第三个Servlet，依次类推。链条上最后一个Servlet负责把响应发送给客户端。\n\n### 如何知道是哪一个客户端的机器正在请求你的Servlet？\n\nServletRequest类可以找出客户端机器的IP地址或者是主机名。getRemoteAddr()方法获取客户端主机的IP地址，getRemoteHost()可以获取主机名。\n\n### HTTP响应的结构是怎么样的？\n\nHTTP响应由三个部分组成：\n\n* 状态码(Status Code)：描述了响应的状态。可以用来检查是否成功的完成了请求。请求失败的情况下，状态码可用来找出失败的原因。如果Servlet没有返回状态码，默认会返回成功的状态码HttpServletResponse.SC_OK。\n* HTTP头部(HTTP Header)：它们包含了更多关于响应的信息。比如：头部可以指定认为响应过期的过期日期，或者是指定用来给用户安全的传输实体内容的编码格式。\n* 主体(Body)：它包含了响应的内容。它可以包含HTML代码，图片，等等。主体是由传输在HTTP消息中紧跟在头部后面的数据字节组成的。\n\n### 什么是cookie？session和cookie有什么区别？\n\ncookie是Web服务器发送给浏览器的一块信息。浏览器会在本地文件中给每一个Web服务器存储cookie。以后浏览器在给特定的Web服务器发请求的时候，同时会发送所有为该服务器存储的cookie。  \n下面列出了session和cookie的区别：  \n无论客户端浏览器做怎么样的设置，session都应该能正常工作。客户端可以选择禁用cookie，但是，session仍然是能够工作的，因为客户端无法禁用服务端的session。  \n在存储的数据量方面session和cookies也是不一样的。session能够存储任意的Java对象，cookie只能存储String类型的对象。\n\n### 浏览器和Servlet通信使用的是什么协议？\n\n浏览器和Servlet通信使用的是HTTP协议。\n\n### 什么是HTTP隧道？\n\nHTTP隧道是一种利用HTTP或者是HTTPS把多种网络协议封装起来进行通信的技术。因此，HTTP协议扮演了一个打通用于通信的网络协议的管道的包装器的角色。把其他协议的请求掩盖成HTTP的请求就是HTTP隧道。\n\n### sendRedirect()和forward()方法有什么区别？\n\nsendRedirect()方法会创建一个新的请求，而forward()方法只是把请求转发到一个新的目标上。重定向(redirect)以后，之前请求作用域范围以内的对象就失效了，因为会产生一个新的请求，而转发(forwarding)以后，之前请求作用域范围以内的对象还是能访问的。一般认为sendRedirect()比forward()要慢。\n\n### 什么是URL编码和URL解码？\n\nURL编码是负责把URL里面的空格和其他的特殊字符替换成对应的十六进制表示，反之就是解码。\n\n### 什么是JSP页面？\n\nJSP页面是一种包含了静态数据和JSP元素两种类型的文本的文本文档。静态数据可以用任何基于文本的格式来表示，比如：HTML或者XML。JSP是一种混合了静态内容和动态产生的内容的技术。\n\n### JSP请求是如何被处理的？\n\n浏览器首先要请求一个以.jsp扩展名结尾的页面，发起JSP请求，然后，Web服务器读取这个请求，使用JSP编译器把JSP页面转化成一个Servlet类。需要注意的是，只有当第一次请求页面或者是JSP文件发生改变的时候JSP文件才会被编译，然后服务器调用servlet类，处理浏览器的请求。一旦请求执行结束，servlet会把响应发送给客户端。\n\n### JSP有什么优点？\n\n下面列出了使用JSP的优点：\n\n* JSP页面是被动态编译成Servlet的，因此，开发者可以很容易的更新展现代码。\n* JSP页面可以被预编译。\n* JSP页面可以很容易的和静态模板结合，包括：HTML或者XML，也可以很容易的和产生动态内容的代码结合起来。\n* 开发者可以提供让页面设计者以类XML格式来访问的自定义的JSP标签库。\n* 开发者可以在组件层做逻辑上的改变，而不需要编辑单独使用了应用层逻辑的页面。\n\n### 什么是JSP指令(Directive)？JSP中有哪些不同类型的指令？\n\nDirective是当JSP页面被编译成Servlet的时候，JSP引擎要处理的指令。  \nDirective用来设置页面级别的指令，从外部文件插入数据，指定自定义的标签库。Directive是定义在 `<%@  %>`之间的。下面列出了不同类型的Directive：\n* 包含指令(Include directive)：用来包含文件和合并文件内容到当前的页面。\n* 页面指令(Page directive)：用来定义JSP页面中特定的属性，比如错误页面和缓冲区。\n* Taglib指令： 用来声明页面中使用的自定义的标签库。\n\n### 什么是JSP动作(JSP action)？\n\nJSP动作以XML语法的结构来控制Servlet引擎的行为。  \n当JSP页面被请求的时候，JSP动作会被执行。它们可以被动态的插入到文件中，重用JavaBean组件，转发用户到其他的页面，或者是给Java插件产生HTML代码。下面列出了可用的动作：\n* jsp:include-当JSP页面被请求的时候包含一个文件。\n* jsp:useBean---找出或者是初始化Javabean。\n* jsp:setProperty---设置JavaBean的属性。\n* jsp:getProperty---获取JavaBean的属性。\n* jsp:forward---把请求转发到新的页面。\n* jsp:plugin---产生特定浏览器的代码。\n\n### 什么是Scriptlets？\n\nJSP技术中，scriptlet是嵌入在JSP页面中的一段Java代码。scriptlet是位于标签内部的所有的东西，在标签与标签之间，用户可以添加任意有效的scriplet。\n\n### 声明(Decalaration)在哪里？\n\n声明跟Java中的变量声明很相似，它用来声明随后要被表达式或者scriptlet使用的变量。添加的声明必须要用开始和结束标签包起来。\n\n### 什么是表达式(Expression)？\n\nJSP表达式是Web服务器把脚本语言表达式的值转化成一个String对象，插入到返回给客户端的数据流中。表达式是在`<%=`和`%>`这两个标签之间定义的。\n\n### 隐含对象是什么意思？有哪些隐含对象？\n\nJSP隐含对象是页面中的一些Java对象，JSP容器让这些Java对象可以为开发者所使用。开发者不用明确的声明就可以直接使用他们。JSP隐含对象也叫做预定义变量。下面列出了JSP页面中的隐含对象：\n* application\n* page\n* request\n* response\n* session\n* exception\n* out\n* config\n* pageContext\n\n## 面向对象\n### 面向对象软件开发的优点有哪些？\n* 代码开发模块化，更易维护和修改。\n* 代码复用。\n* 增强代码的可靠性和灵活性。\n* 增加代码的可理解性。\n* 面向对象编程有很多重要的特性，比如：封装，继承，多态和抽象。\n\n### 封装的定义和好处有哪些？\n\n封装给对象提供了隐藏内部特性和行为的能力。对象提供一些能被其他对象访问的方法来改变它内部的数据。在Java当中，有3种修饰符：public，private和protected。每一种修饰符给其他的位于同一个包或者不同包下面对象赋予了不同的访问权限。  \n下面列出了使用封装的一些好处：  \n* 通过隐藏对象的属性来保护对象内部的状态。\n* 提高了代码的可用性和可维护性，因为对象的行为可以被单独的改变或者是扩展。\n* 禁止对象之间的不良交互提高模块化。\n\n### 多态的定义？\n\n多态是编程语言给不同的底层数据类型做相同的接口展示的一种能力。一个多态类型上的操作可以应用到其他类型的值上面。\n\n### 继承的定义？\n\n继承给对象提供了从基类获取字段和方法的能力。继承提供了代码的重用行，也可以在不修改类的情况下给现存的类添加新特性。\n\n### 抽象的定义？抽象和封装的不同点？\n\n抽象是把想法从具体的实例中分离出来的步骤，因此，要根据他们的功能而不是实现细节来创建类。Java支持创建只暴漏接口而不包含方法实现的抽象的类。这种抽象技术的主要目的是把类的行为和实现细节分离开。  \n抽象和封装是互补的概念。一方面，抽象关注对象的行为。另一方面，封装关注对象行为的细节。一般是通过隐藏对象内部状态信息做到封装，  \n因此，封装可以看成是用来提供抽象的一种策略。\n","tags":["Java"],"categories":["面试题"]},{"title":"Java修饰符","url":"%2Fpassages%2Fmodifier%2F","content":"\n\n# 概述\nJava提供了很多的修饰符，修饰符用于描述类/方法/变量的一些属性，主要分为两类\n- 访问修饰符\n- 非访问修饰符\n\n# 访问修饰符\n用于描述该类/方法/变量的被访问的权限，关键字有四个，权限范围如下：\n\n| 修饰符    | 包外 | 子类 | 包内 | 类内 |\n| --------- | ---- | ---- | ---- | ---- |\n| public    | √   | √   | √   | √   |\n| protected |      | √   | √   | √   |\n| default   |      |      | √   | √   |\n| private   |      |      |      | √   |\n\n## public（公有访问修饰符）\n被声明为 public 的类、方法、构造方法和接口能够被任何其他类访问。  \n如果几个相互访问的 public 类分布在不同的包中，则需要导入相应 public 类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。  \n++Java 程序的 main() 方法必须设置成公有的，否则，Java 解释器将不能运行该类。++\n\n## protected（受保护的访问修饰符）\n被声明为 protected 的变量、方法和构造器能被**同一个包**中的任何其他类访问，也能够被**不同包中的子类**访问。  \nprotected 访问修饰符**不能修饰类和接口**，方法和成员变量能够声明为 protected，但是**接口的成员变量和成员方法不能声明为 protected**。  \n子类能访问 protected 修饰符声明的方法和变量，这样就能避免不相关的类使用这些方法和变量。  \n\n## 不使用任何关键字（默认访问修饰符）\n使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。**接口里的变量都隐式声明为public static final，接口里的方法默认情况下访问权限为public**。\n\n## private（私有访问修饰符）\n私有访问修饰符是最严格的访问级别，所以被声明为 private 的方法、**变量和构造方法只能被所属类访问**，并且**类和接口不能声明为 private**。  \n声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。  \nPrivate 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。  \n\n## 注意\n子类的类/方法/变量的权限修饰符的范围不能比父类的小\n- 父类中声明为 public 的方法在子类中也必须为 public。\n- 父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。\n- 父类中声明为 private 的方法，不能够被继承。\n\n如下图，b类中的A方法范围比a类中的A方法访问权限范围更大\n![](http://olwt21mf4.bkt.clouddn.com/17-4-15/84824545-file_1492238954686_d9a4.png)  \n如下图，如果b类中的A方法的修饰符改为private，那么就会报错\n![](http://olwt21mf4.bkt.clouddn.com/17-4-15/69705924-file_1492239061720_337b.png)  \n\n# 非访问修饰符\n为了实现一些其他的功能，Java 也提供了许多非访问修饰符。\n- **static** 修饰符，用来创建类方法和类变量。\n- **final** 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。\n- **abstract** 修饰符，用来创建抽象类和抽象方法。\n- **synchronized** 和 **volatile** 修饰符，主要用于线程的编程。\n\n## static\n被static修饰的类/方法/变量不属于类的实例，属于类本身\n- 静态变量：\nstatic关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static变量。\n- 静态方法：\nstatic关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。\n\n对类变量和方法的访问可以直接使用 classname.variablename 和 classname.methodname 的方式访问。  \n如下图，main方法中可以直接访问静态变量`s`和静态方法`print()`：  \n![](http://olwt21mf4.bkt.clouddn.com/17-4-15/4876772-file_1492239938570_72fa.png)  \n事实上通过类名来访问该类中的静态变量之外，事实上类的实例也可以调用，如下图的写法也是正确的，尽管Java会给一个警告，因为Java不倡导大家这样使用：  \n![](http://olwt21mf4.bkt.clouddn.com/17-4-15/12099555-file_1492239938679_29f1.png)  \n\n## final\nfinal可以修饰类/方法/变量，具体规则如下\n### final 变量\nfinal 变量能被显式地初始化并且只能初始化一次。被声明为 final 的对象的引用不能指向不同的对象。但是 final 对象里的数据可以被改变。也就是说 **final 对象的引用不能改变，但是里面的值可以改变**。  \n**举例**  \n当我们试图更改final变量的值时候，Java会报错\n![](http://olwt21mf4.bkt.clouddn.com/17-4-15/17188853-file_1492240334960_175d.png)  \n同样的，接下来的这个例子也会报错\n![](http://olwt21mf4.bkt.clouddn.com/17-4-15/90587236-file_1492240694369_5f2f.png)  \n但是对`value`中的值可以随意改变\n![](http://olwt21mf4.bkt.clouddn.com/17-4-15/90165029-file_1492240764709_15c5c.png)  \nfinal 修饰符通常和 static 修饰符一起使用来创建类常量。\n### final 方法\n类中的 final 方法可以被子类继承，但是不能被子类修改。  \n声明 final 方法的主要目的是防止该方法的内容被修改。  \n如下图，a类中的`final A()`方法可以被b类继承\n![](http://olwt21mf4.bkt.clouddn.com/17-4-15/52182757-file_1492241013395_1415b.png)  \n但是当我们试图在b类中重写`final A()`时候，Java会报错\n![](http://olwt21mf4.bkt.clouddn.com/17-4-15/78514708-file_1492241101451_12105.png)  \n### final 类\nfinal 类不能被继承，没有类能够继承 final 类的任何特性。\n\n## abstract\n### 抽象类\n- 抽象类不能用来实例化对象，声明**抽象类的唯一目的是为了将来对该类进行扩充**。  \n- **一个类不能同时被 abstract 和 final 修饰**。**如果一个类包含抽象方法，那么该类一定要声明为抽象类**，否则将出现编译错误。  \n- **抽象类可以包含抽象方法和非抽象方法**。  \n### 抽象方法\n- 抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。  \n- **抽象方法不能被声明成 final 和 static**。  \n- 任何继承抽象类的**子类必须实现父类的所有抽象方法**，**除非该子类也是抽象类**。  \n- 如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。**抽象类可以不包含抽象方法**。  \n- 抽象方法的声明以分号结尾，例如：public abstract sample();。  \n\n## synchronized\nsynchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。\n\n## transient\n序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。  \n该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。\n\n## volatile\nvolatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，**两个不同的线程总是看到某个成员变量的同一个值**。\n**一个 volatile 对象引用可能是 null**。\n\n## native\n使用native关键字说明这个方法是原生函数，也就是这个方法是用C/C\\+\\+语言实现的，并且被编译成了DLL，由java去调用。 这些函数的实现体在DLL中，JDK的源代码中并不包含，你应该是看不到的。对于不同的平台它们也是不同的。\n\n# 参考\n[Java 修饰符 | 菜鸟教程](http://www.runoob.com/java/java-modifier-types.html)\n","tags":["Java"],"categories":["Java"]},{"title":"算法之冒泡排序","url":"%2Fpassages%2Fbubble-sort%2F","content":"# 概念\n冒泡排序是一种简单的排序算法，它重复的走访过要排序的数列，将一个数列从大到小或者从小到大排序，一次比较两个元素。如果他们的顺序错误，就把他们交换过来。走访数列的工作是重复地进行直到没有需要交换的元素，也就是说该数列已经排序完成。\n# 步骤\n假设从小到大：\n\n 1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n 2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。进行一轮的比较之后,最大的数会被不断交换到最后一位,这样最后一位数就是有序的了。\n 3. 针对所有的元素重复以上的步骤，除了最后一个。\n 4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n \n# 举例\n有数组[8,3,6,9,1]，从小到大排序：\n 1. 第一趟排序（外循环）：\n \t第一次交换（内循环）：[**8,3**,6,9,1]->[**3,8**,6,9,1]\t（8>3，交换位置）\n\t第二次交换（内循环）：[3,**8,6**,9,1]->[3,**6,8**,9,1]\t（8>6，交换位置）\n\t第三次交换（内循环）：[3,6,**8,9**,1]->[3,6,**8,9**,1]\t（8<9，位置不变）\n\t第四次交换（内循环）：[3,6,8,**9,1**]->[3,6,8,**1,9**]\t（9>1，交换位置）\n\t第一趟结束，最大的数9被排到了最后,得到新的数组是[3,6,8,1,9]。\n 2. 第二趟排序（外循环，除去已经排好的最大数9）：\n    第一次交换（内循环）：[**3,6**,8,1,9]->[**3,6**,8,1,9]（3<6，位置不变）\n\t第二次交换（内循环）：[3,**6,8**,1,9]->[3,**6,8**,1,9]（6<8，位置不变）\n\t第三次交换（内循环）：[3,6,**8,1**,9]->[3,6,**1,8**,9]（8>1,交换位置）\n\t因为9已经排好，所以第二趟排序结束，至此8也被排好了，排好的数组是[3,6,1,8,9]。\n3. 以此类推，排得最后的数组是[1,3,6,8,9]。\n\n# 代码\n","tags":["冒泡"],"categories":["算法"]},{"title":"设计模式之单例模式","url":"%2Fpassages%2Fsingleton%2F","content":"## 单例模式\n### 作用\n保证一个类只有一个实例，并且提供一个访问该实例的全局访问入口。\n### 常用场景\n 1. Windows的任务管理器，很熟悉吧，不信自己试试看。\n 2. Web项目中读取配置文件的对象，一般也应用单例模式，因为配置文件是共享的资源。\n 3. Windows的回收站也是一个单例模式，整个系统运行过程中，网站一直维护着一个仅有的实例。\n 4. 数据库的连接池，因为数据库连接池是一种数据库资源。数据库软件系统中使用连接池，主要是节省打开或者关闭数据库连接所引起的效率损耗，这种效率上损耗是非常昂贵的，使用单例模式来维护，就可以大大降低这种损耗。\n 5. Spring中创建Bean实例默认也是单例的。\n 6. SpringMVC Struts中的控制器也是单例模式。\n 7. 多线程的线程池的设计一般也采用单例模式，因为线程池要方便对池中的线程进行管理。\n \n **单例模式一般发生在以下条件下：**\n \n (1). 资源共享的情况下，避免由于资源操作时导致的性能损耗。如Web应用配置文件。\n (2). 控制资源的情况下，方便资源之间的互相通信。如线程池。\n\n### 单例模式的优缺点\n#### 优点\n\n 1. 单例，说白了就是一个实例，能够减少系统的性能开销，当一个对象需要产生时，并且消耗的资源较多，那么产生对象的构建方式就可以通过单例来构建。\n 2. 单例模式存在全局访问点，所以可以优化共享资源访问\n\n#### 缺点\n\n 1. 由于单例模式中没有抽象层，因此单例类的扩展有很多的困难。\n 2. 单例类的职责过重，在一定程度上违背了“单一职责原则”。\n 3. 滥用单例将带来一些负面影响，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出。\n 4. 如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。\n\n### 常见单例模式的几种实现方式\n\n 1. 饿汉式\n 2. 懒汉式\n 3. 枚举单例\n 4. 双检锁/双重校验锁\n 5. 静态内部类\n","tags":["设计模式"]},{"title":"C++ 运算符重载II","url":"%2Fpassages%2Foperator-two%2F","content":"**本例在上一例的基础上增加重载-=和*=的成员函数.**\n```cpp\n#include<iostream>\nusing namespace std;\nclass Complex { //复数类\n    private:    //定义私有成员变量\n        double real;    //定义实数部\n        double image;   //定义虚数部\n    public:\n        Complex(void):real(0),image(0) {}   //定义参数为空的构造函数\n        Complex(double rp):real(rp),image(0) {} //定义只有实数部的构造函数\n        Complex(double rp,double ip):real(rp),image(ip) {}  //定义参数同时制定实数和虚数的构造函数\n        ~Complex() {}  //定义析构函数（无特定操作可不写）\n\n        Complex operator+(const Complex &x) const;  //声明重载运算符+\n        Complex operator-(const Complex &x) const;  //声明重载运算符-\n        Complex operator*(const Complex &x) const;  //声明重载运算符*\n        Complex operator/(const Complex &x) const;  //声明重载运算符/\n        bool operator==(const Complex &x) const;    //声明重载运算符==\n        Complex& operator+=(const Complex &x);      //声明重载运算符+=\n\n        Complex& operator-=(const Complex &x);      //声明重载运算符-=\n        Complex& operator*=(const Complex &x);      //声明重载运算符*=\n\n        void Print(void) const; //定义类成员输出函数\n};\ninline Complex Complex::operator+(const Complex &x) const { //重载运算符的实际函数体\n    return Complex(real + x.real, image + x.image);\n}\ninline Complex Complex::operator-(const Complex &x) const {\n    return Complex(real - x.real, image - x.image);\n}\ninline Complex Complex::operator*(const Complex &x) const {\n    return Complex(real * x.real - image * x.image, real * x.image + image * x.real);\n}\nComplex Complex::operator/(const Complex &x) const {\n    double m;\n    m = x.real * x.real + x.image * x.image;\n    return Complex((real * x.real + image * x.image) / m, (image * x.real - real * x.image) / m);\n}\ninline bool Complex::operator==(const Complex &x) const {   //运算符==判断是否相等，应返回bool类型的值\n    return bool(real == x.real && image == x.image);\n}\nComplex& Complex::operator+=(const Complex &x) {    //因为+=的结果是将被加数加在自己的成员函数上，所以返回自身的指针\n    real += x.real;\n    image += x.image;\n    return *this;\n}\nComplex& Complex::operator-=(const Complex &x) {\n    real -= x.real;\n    image -= x.image;\n    return *this;\n}\nComplex& Complex::operator*=(const Complex &x) {\n    real = real * x.real - image * x.image;\n    image = real * x.image + image * x.real;\n    return *this;\n}\nvoid Complex::Print(void) const {   //输出函数\n    cout<<\"(\"<<real<<\",\"<<image<<\"i)\"<<endl;\n}\n\nint main(void) {    //测试函数\n    Complex a(3, 5), b(2, 3), c;\n    c = a + b * a / b - b;\n    c.Print();\n\n    a += b;\n    a.Print();\n\n    a *= b; //测试*= \n    a.Print();\n\n    a -= b; //测试-= \n    a.Print();\n\n    if(a == c) cout<<\"对象a等于对象c\"<<endl;\n    else cout<<\"对象a不等于对象c\"<<endl;\n\n    return 0;\n}\n```","tags":["C++"],"categories":["C++"]},{"title":"C++ 运算符重载","url":"%2Fpassages%2Foperator%2F","content":"本例为实现复数运算，定义一个复数类，其中私有成员变量有两个，实数部real和虚数部image，通过运算符重载实现复数的直接相加减。  \n```cpp\n#include<iostream>\nusing namespace std;\nclass Complex { //复数类\n    private:    //定义私有成员变量\n        double real;    //定义实数部\n        double image;   //定义虚数部\n    public:\n        Complex(void):real(0),image(0) {}   //定义参数为空的构造函数\n        Complex(double rp):real(rp),image(0) {} //定义只有实数部的构造函数\n        Complex(double rp,double ip):real(rp),image(ip) {}  //定义参数同时制定实数和虚数的构造函数\n        ~Complex() {}  //定义析构函数（无特定操作可不写）\n\n        Complex operator+(const Complex &x) const;  //声明重载运算符+\n        Complex operator-(const Complex &x) const;  //声明重载运算符-\n        Complex operator*(const Complex &x) const;  //声明重载运算符*\n        Complex operator/(const Complex &x) const;  //声明重载运算符/\n        bool operator==(const Complex &x) const;    //声明重载运算符==\n        Complex& operator+=(const Complex &x);      //声明重载运算符+=\n        void Print(void) const; //定义类成员输出函数\n};\ninline Complex Complex::operator+(const Complex &x) const { //重载运算符的实际函数体\n    return Complex(real + x.real,image + x.image);\n}\ninline Complex Complex::operator-(const Complex &x) const {\n    return Complex(real - x.real,image - x.image);\n}\ninline Complex Complex::operator*(const Complex &x) const {\n    return Complex(real * x.real - image * x.image,real * x.image + image * x.real);\n}\nComplex Complex::operator/(const Complex &x) const {\n    double m;\n    m = x.real * x.real + x.image * x.image;\n    return Complex((real * x.real + image * x.image) / m, (image * x.real - real * x.image) / m);\n}\ninline bool Complex::operator==(const Complex &x) const {   //运算符==判断是否相等，应返回bool类型的值\n    return bool(real == x.real && image == x.image);\n}\nComplex& Complex::operator+=(const Complex &x) {    //因为+=的结果是将被加数加在自己的成员函数上，所以返回自身的指针\n    real += x.real;\n    image += x.image;\n    return *this;\n}\nvoid Complex::Print(void) const {   //输出函数\n    cout<<\"(\"<<real<<\",\"<<image<<\"i)\"<<endl;\n}\n\nint main(void) {    //测试函数\n    Complex a(3, 5), b(2, 3), c;\n    c = a + b * a / b - b;\n    c.Print();\n\n    a += b;\n    a.Print();\n\n    if(a == c) cout<<\"对象a等于对象c\"<<endl;\n    else cout<<\"对象a不等于对象c\"<<endl;\n\n    return 0;\n}\n```","tags":["C++"],"categories":["C++"]}]